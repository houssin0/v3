{"version":3,"sources":["pages/authentication/ForgetPassword.tsx"],"names":["ForgetPassword","useState","error","setError","loading","setLoading","validationSchema","Yup","shape","email","max","required","useFormik","initialValues","submit","onSubmit","values","setTimeout","toast","success","errors","touched","handleBlur","handleChange","handleSubmit","height","alignItems","flexDirection","justifyContent","sx","padding","maxWidth","marginTop","boxShadow","mb","width","src","alt","fontSize","fontWeight","flexWrap","my","noValidate","style","fullWidth","name","type","label","onBlur","onChange","value","Boolean","helperText","mt","textAlign","variant","margin","color","to"],"mappings":"0PAyHeA,UA9GY,WACzB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAOMC,EAAmBC,MAAaC,MAAM,CAC1CC,MAAOF,MACJE,MAAM,yBACNC,IAAI,KACJC,SAAS,uBAGd,EACEC,YAAU,CACRC,cAdkB,CACpBJ,MAAO,mBACPK,OAAQ,MAaNR,mBACAS,SAAU,SAACC,GACTX,GAAW,GAEXY,YAAW,WACTZ,GAAW,GACXa,IAAMC,QAAQ,+BACb,KAECjB,IACFC,EAAS,UACTE,GAAW,OAdXe,EAAR,EAAQA,OAAQJ,EAAhB,EAAgBA,OAAQK,EAAxB,EAAwBA,QAASC,EAAjC,EAAiCA,WAAYC,EAA7C,EAA6CA,aAAcC,EAA3D,EAA2DA,aAmB3D,OACE,cAAC,IAAD,CACEC,OAAO,QACPC,WAAW,SACXC,cAAc,SACdC,eAAe,SAJjB,SAME,eAAC,IAAD,CAAMC,GAAI,CAAEC,QAAS,EAAGC,SAAU,IAAKC,UAAW,EAAGC,UAAW,GAAhE,UACE,eAAC,IAAD,CACEP,WAAW,SACXC,cAAc,SACdC,eAAe,SACfM,GAAI,EAJN,UAME,cAAC,IAAD,CAAKC,MAAO,GAAID,GAAI,EAApB,SACE,qBAAKE,IAAI,wBAAwBD,MAAM,OAAOE,IAAI,eAEpD,cAAC,IAAD,CAAIC,SAAU,GAAIC,WAAY,IAA9B,oCAKF,eAAC,IAAD,CAASX,eAAe,gBAAgBY,SAAS,OAAOC,GAAI,EAA5D,UACE,uBAAMC,YAAU,EAAC3B,SAAUS,EAAcmB,MAAO,CAAER,MAAO,QAAzD,UACE,cAAC,IAAD,CACES,WAAS,EACTC,KAAK,QACLC,KAAK,QACLC,MAAM,QACNC,OAAQ1B,EACR2B,SAAU1B,EACV2B,MAAOlC,EAAOP,OAAS,GACvBP,MAAOiD,QAAQ9B,EAAQZ,OAASW,EAAOX,OACvC2C,WAAY/B,EAAQZ,OAASW,EAAOX,QAGrCP,GACC,cAAC,IAAD,CACEA,OAAK,EACL2B,GAAI,CACFwB,GAAI,EACJf,SAAU,GACVC,WAAY,IACZe,UAAW,UANf,SASGpD,IAIL,cAAC,IAAD,CAAK2B,GAAI,CAAEwB,GAAI,GAAf,SACGjD,EACC,cAAC,IAAD,CAAeA,SAAO,EAACwC,WAAS,EAACW,QAAQ,YAAzC,mBAIA,cAAC,IAAD,CAAQX,WAAS,EAACE,KAAK,SAASS,QAAQ,YAAxC,wBAON,eAAC,IAAD,CAAOC,OAAO,OAAOH,GAAI,EAAGI,MAAM,gBAAlC,mCACyB,IACvB,cAAC,IAAD,CAAMC,GAAG,YAAT,SACE,cAAC,IAAD,CAAOD,MAAM,eAAb","file":"static/js/53.7b245b5a.chunk.js","sourcesContent":["import { LoadingButton } from \"@mui/lab\";\nimport { Box, Button, Card, FormHelperText } from \"@mui/material\";\nimport FlexBox from \"components/FlexBox\";\nimport LightTextField from \"components/LightTextField\";\nimport { H1, Small } from \"components/Typography\";\nimport { useFormik } from \"formik\";\nimport { FC, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Link } from \"react-router-dom\";\nimport * as Yup from \"yup\";\n\nconst ForgetPassword: FC = () => {\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const initialValues = {\n    email: \"demo@example.com\",\n    submit: null,\n  };\n  // form field value validation schema\n  const validationSchema = Yup.object().shape({\n    email: Yup.string()\n      .email(\"Must be a valid email\")\n      .max(255)\n      .required(\"Email is required\"),\n  });\n\n  const { errors, values, touched, handleBlur, handleChange, handleSubmit } =\n    useFormik({\n      initialValues,\n      validationSchema,\n      onSubmit: (values) => {\n        setLoading(true);\n\n        setTimeout(() => {\n          setLoading(false);\n          toast.success(\"Reset link has been sent!\");\n        }, 1000);\n\n        if (error) {\n          setError(\"Error!\");\n          setLoading(false);\n        }\n      },\n    });\n\n  return (\n    <FlexBox\n      height=\"100vh\"\n      alignItems=\"center\"\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n    >\n      <Card sx={{ padding: 4, maxWidth: 600, marginTop: 4, boxShadow: 1 }}>\n        <FlexBox\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          justifyContent=\"center\"\n          mb={5}\n        >\n          <Box width={38} mb={1}>\n            <img src=\"/static/logo/logo.svg\" width=\"100%\" alt=\"Uko Logo\" />\n          </Box>\n          <H1 fontSize={24} fontWeight={700}>\n            Reset your password\n          </H1>\n        </FlexBox>\n\n        <FlexBox justifyContent=\"space-between\" flexWrap=\"wrap\" my={2}>\n          <form noValidate onSubmit={handleSubmit} style={{ width: \"100%\" }}>\n            <LightTextField\n              fullWidth\n              name=\"email\"\n              type=\"email\"\n              label=\"Email\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              value={values.email || \"\"}\n              error={Boolean(touched.email && errors.email)}\n              helperText={touched.email && errors.email}\n            />\n\n            {error && (\n              <FormHelperText\n                error\n                sx={{\n                  mt: 2,\n                  fontSize: 13,\n                  fontWeight: 500,\n                  textAlign: \"center\",\n                }}\n              >\n                {error}\n              </FormHelperText>\n            )}\n\n            <Box sx={{ mt: 4 }}>\n              {loading ? (\n                <LoadingButton loading fullWidth variant=\"contained\">\n                  Reset\n                </LoadingButton>\n              ) : (\n                <Button fullWidth type=\"submit\" variant=\"contained\">\n                  Reset\n                </Button>\n              )}\n            </Box>\n          </form>\n\n          <Small margin=\"auto\" mt={3} color=\"text.disabled\">\n            Don't have an account?{\" \"}\n            <Link to=\"/register\">\n              <Small color=\"primary.main\">Create an account</Small>\n            </Link>\n          </Small>\n        </FlexBox>\n      </Card>\n    </FlexBox>\n  );\n};\n\nexport default ForgetPassword;\n"],"sourceRoot":""}